AWSTemplateFormatVersion: "2010-09-09"
Description: Deploys a Solodev Optimized EKS cluster into an existing VPC
Metadata:
  QSLint:
    Exclusions: [W3002, W3001, W1010]
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network configuration
        Parameters:
          - VPCID
          - PrivateSubnet1ID
          - PrivateSubnet2ID
          - PrivateSubnet3ID
          - PublicSubnet1ID
          - PublicSubnet2ID
          - PublicSubnet3ID
      - Label:
          default: Amazon EC2 configuration
        Parameters:
          - KeyPairName
      - Label:
          default: Amazon EKS configuration
        Parameters:
          - NodeInstanceType
          - NumberOfNodes
          - NodeGroupName
          - NodeVolumeSize
          - ManagedNodeGroup
          - KubernetesVersion
    ParameterLabels:
      KeyPairName:
        default: SSH key name
      NodeInstanceType:
        default: Nodes instance type
      NumberOfNodes:
        default: Number of nodes
      NodeGroupName:
        default: Node group name
      NodeVolumeSize:
        default: Node volume size
      ManagedNodeGroup:
        default: Managed Node Group
      PublicSubnet1ID:
        default: Public subnet 1 ID
      PublicSubnet2ID:
        default: Public subnet 2 ID
      PublicSubnet3ID:
        default: Public subnet 3 ID
      PrivateSubnet1ID:
        default: Private subnet 1 ID
      PrivateSubnet2ID:
        default: Private subnet 2 ID
      PrivateSubnet3ID:
        default: Private subnet 3 ID
      VPCID:
        default: VPC ID
Parameters:
  KeyPairName:
    Description: Name of an existing key pair, which allows you
      to securely connect to your instance after it launches.
    Type: String
    Default: ""
  NodeInstanceType:
    Default: t3.medium
    AllowedValues:
      - t3.nano
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.12xlarge
      - m5.24xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c5.18xlarge
      - i3.large
      - i3.xlarge
      - i3.2xlarge
      - i3.4xlarge
      - i3.8xlarge
      - i3.16xlarge
      - x1.16xlarge
      - x1.32xlarge
      - p3.2xlarge
      - p3.8xlarge
      - p3.16xlarge
      - r5.large
      - r5.xlarge
      - r5.2xlarge
      - r5.4xlarge
      - r5.12xlarge
      - r5.24xlarge
      - r5d.large
      - r5d.xlarge
      - r5d.2xlarge
      - r5d.4xlarge
      - r5d.12xlarge
      - r5d.24xlarge
      - z1d.large
      - z1d.xlarge
      - z1d.2xlarge
      - z1d.3xlarge
      - z1d.6xlarge
      - z1d.12xlarge
    ConstraintDescription: Must be a valid EC2 instance type
    Description: The type of EC2 instance for the node instances.
    Type: String
  NumberOfNodes:
    Default: 3
    Description: The number of Amazon EKS node instances. The default is one for each of the three Availability Zones.
    Type: Number
  MaxNumberOfNodes:
    Default: 3
    Description: Maximum number of Amazon EKS node instances. The default is three.
    Type: Number
  NodeGroupName:
    Default: Default
    Description: The name for EKS node group.
    Type: String
  NodeInstanceFamily:
    AllowedValues: ['Standard', 'ARM', 'GPU']
    Type: String
    Description: Choose the instance family to match the value of "Node instance type."
    Default: Standard
  NodeGroupType:
    Type: String
    AllowedValues: [ Managed, Unmanaged ]
    Default: Managed
    Description: Choose "Unmanaged" to create an Auto Scaling group without using the EKS-managed node groups feature.
  NodeGroupOS:
    AllowedValues:
      - 'Amazon Linux 2'
      - 'Bottlerocket'
      - 'Windows'
    Default: 'Amazon Linux 2'
    Description: Operating system to use for node instances. Note that if you choose "Windows," an additional
      Amazon Linux node group is created.
    Type: String
  NodeVolumeSize:
    Default: 20
    Description: "The size for the node's root EBS volumes."
    Type: String
  ManagedNodeGroup:
    AllowedValues: [ "yes", "no" ]
    Default: "no"
    Description: Choose if you want to use a managed node group. If you select "yes", you must select Kubernetes version 1.14 or higher.
    Type: String
  VPCID:
    Type: "AWS::EC2::VPC::Id"
    Description: The ID of your existing VPC (e.g., vpc-0343606e)
  PublicSubnet1ID:
    Type: String
    Description: The ID of the public subnet in Availability Zone 1 in your existing VPC (e.g., subnet-a0246dcd)
    Default: ""
  PublicSubnet2ID:
    Type: String
    Description: The ID of the public subnet in Availability Zone 2 in your existing VPC (e.g., subnet-b1236eea)
    Default: ""
  PublicSubnet3ID:
    Type: String
    Description: The ID of the public subnet in Availability Zone 3 in your existing VPC (e.g., subnet-c3456aba)
    Default: ""
  PrivateSubnet1ID:
    Type: "AWS::EC2::Subnet::Id"
    Description: The ID of the private subnet in Availability Zone 1 in your existing VPC (e.g., subnet-fe9a8b32)
  PrivateSubnet2ID:
    Type: String
    Description: The ID of the private subnet in Availability Zone 2 in your existing VPC (e.g., subnet-be8b01ea)
    Default: ""
  PrivateSubnet3ID:
    Type: String
    Description: The ID of the private subnet in Availability Zone 3 in your existing VPC (e.g., subnet-abd39039)
    Default: ""
  KubernetesVersion:
    Type: String
    Default: "1.21"
  EKSPublicAccessCIDRs:
    Type: List<String>
    Default: 0.0.0.0/0
  EKSPublicAccessEndpoint:
    Type: String
    AllowedValues: [Enabled, Disabled]
    Default: Disabled
  EKSPrivateAccessEndpoint:
    Type: String
    AllowedValues: [Enabled, Disabled]
    Default: Enabled
  EKSClusterLoggingTypes:
    Type: List<String>
    Default: ""
  EKSEncryptSecrets:
    Type: String
    AllowedValues: [Enabled, Disabled]
    Default: Enabled
  EKSEncryptSecretsKmsKeyArn:
    Type: String
    Default: ""
  AdditionalEKSAdminUserArn:
    Type: String
    Default: ""
  AdditionalEKSAdminRoleArn:
    Type: String
    Default: ""
  IamOidcProvider:
    Type: String
    AllowedValues: [ "Enabled", "Disabled" ]
    Default: "Enabled"
  ProvisionWeave:
    Type: String
    AllowedValues: [ "Enabled", "Disabled" ]
    Default: "Enabled"
    Description: "Choose Enabled to enable Weave CNI"
  ProvisionNginxIngress:
    Type: String
    AllowedValues: [ "Enabled", "Disabled" ]
    Default: "Enabled"
    Description: "Choose Enabled to enable Inginx Proxy"
  ProvisionExternalDNS:
    Type: String
    AllowedValues: [ "Enabled", "Disabled" ]
    Default: "Enabled"
    Description: "Choose Enabled to enable External DNS with Route 53"
  ProvisionCMS:
    Type: String
    AllowedValues: [ "Enabled", "Disabled" ]
    Default: "Disabled"
    Description: "Choose Enabled to enable Solodev CMS"
  DefaultCMS:
    Type: String
    AllowedValues: [ "", "solodev-cms", "wordpress" ]
    Description: "Choose preferred CMS"
    Default: "wordpress"
  AdminEmail:
    Type: String
    Default: ""
    Description: "What is your email address?"
  WebsiteUrl:
    Type: String
    Default: ""
    Description: "Website address"
  CustomAmiId:
    Type: String
    Default: "ami-0d6c8b2a8562eba37"
    Description: "(Optional) If an AMI ID is specified: https://docs.aws.amazon.com/eks/latest/userguide/retrieve-ami-id.html"
  LambdaBucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    Default: solodev-kubernetes
    Type: String
  KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/.]*$
    Default: cloudformation/
    Type: String

Conditions:
  EnablePublicSubnets: !Not [!Equals [!Ref PublicSubnet1ID, ""]]
  EnablePrivateEndpoint: !Equals [ !Ref EKSPrivateAccessEndpoint, "Enabled" ]
  EnablePublicEndpoint: !Equals [ !Ref EKSPublicAccessEndpoint, "Enabled" ]
  CreateKey: !And
    - !Equals [ !Ref EKSEncryptSecretsKmsKeyArn, "" ]
    - !Equals [ !Ref EKSEncryptSecrets, Enabled ]
  EnableEncryption: !Equals [ !Ref EKSEncryptSecrets, Enabled ]
  LoggingEnabled: !Not [ !Equals [ !Select [ 0, !Ref EKSClusterLoggingTypes ], "" ] ]
  EnableIamOidcProvider: !Equals [!Ref 'IamOidcProvider', 'Enabled']
  3AZDeployment: !Not [!Equals [!Ref PrivateSubnet3ID, ""]]
  2AZDeployment: !Or
    - !Not [!Equals [!Ref PrivateSubnet2ID, ""]]
    - !Not [!Equals [!Ref PrivateSubnet3ID, ""]]
  CustomAmi: !Equals [!Ref CustomAmiId, 'Enabled']
  EnableWeave: !Equals [!Ref 'ProvisionWeave', 'Enabled']
  EnableNginxIngress: !Equals [!Ref 'ProvisionNginxIngress', 'Enabled']
  EnableExternalDNS: !Equals [!Ref 'ProvisionExternalDNS', 'Enabled']
  EnableCMS: !Equals [!Ref 'ProvisionCMS', 'Enabled']
  AddUser: !Not [ !Equals [ !Ref AdditionalEKSAdminUserArn, "" ] ]
  AddRole: !Not [ !Equals [ !Ref AdditionalEKSAdminRoleArn, "" ] ]
  UsingDefaultBucket: !Equals [!Ref LambdaBucketName, 'solodev-kubernetes']

Resources:

  #============================================================================#
  # Control plane
  #============================================================================#
  
  KMSKey:
    Condition: CreateKey
    Type: "AWS::KMS::Key"
    Metadata:
      cfn-lint:
        config:
          ignore_checks: [EIAMPolicyActionWildcard, EKMSKeyEnableKeyRotation]
          ignore_reasons:
            EKMSKeyEnableKeyRotation: 'Need to experiment further with the effets of rotating keys and EKS secrets'
            EIAMPolicyWildcardResource: 'this is the default kms policy as per https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html#key-policy-default'
    Properties:
      KeyPolicy: {
        "Version": "2012-10-17",
        "Id": "key-default-1",
        "Statement": [
          {
            "Sid": "Enable IAM User Permissions",
            "Effect": "Allow",
            "Principal": {
              "AWS": !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
            },
            "Action": "kms:*",
            "Resource": "*"
          }
        ]
      }

  ControlPlane:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref AWS::StackName
      Version: !Ref KubernetesVersion
      RoleArn: !GetAtt ControlPlaneRole.Arn
      ResourcesVpcConfig:
        SecurityGroupIds: 
          - !Ref ControlPlaneSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1ID
          - !Ref PrivateSubnet2ID
        PublicAccessCidrs: !Ref EKSPublicAccessCIDRs
        EndpointPrivateAccess: !If [ EnablePrivateEndpoint, true, false ]
        EndpointPublicAccess: !If [ EnablePublicEndpoint, true, false ]
      EncryptionConfig: !If
        - EnableEncryption
        - - Resources: [ secrets ]
            Provider:
              KeyArn: !If [ CreateKey, !GetAtt KMSKey.Arn, !Ref EKSEncryptSecretsKmsKeyArn ]
        - !Ref AWS::NoValue
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ControlPlane"

  ClusterOIDCProvider:
    Condition: EnableIamOidcProvider
    Type: AWS::IAM::OIDCProvider
    Properties:
      ClientIdList:
        - sts.amazonaws.com
      ThumbprintList:
        - 9e99a48a9960b14926bb7f3b02e22da2b0ab7280
      Url: !GetAtt ControlPlane.OpenIdConnectIssuerUrl

  ControlPlaneRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
            Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy

  KubernetesAdminRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: eksStackPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:*
                  - eks:*
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeSubnets
                  - ec2:DescribeVpcs
                  - lambda:InvokeFunction
                  - s3:GetObject
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - lambda:AddPermission
                  - lambda:RemovePermission
                Resource:  "*"
              - Effect: Allow
                Action:
                  - events:PutRule
                  - events:DeleteRule
                  - events:PutTargets
                  - events:RemoveTargets
                Resource:  "*"
              - Effect: Allow
                Action:
                  - iam:CreateRole
                  - iam:CreatePolicy
                  - iam:AttachRolePolicy
                  - iam:UpdateAssumeRolePolicy
                  - iam:CreateOpenIDConnectProvider
                  - iam:GetRole
                Resource:  "*"

  #============================================================================#
  # Control plane security group
  #============================================================================#

  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the elastic network interfaces between the control plane and the worker nodes
      VpcId: !Ref VPCID
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ControlPlaneSecurityGroup"

  ControlPlaneIngressFromNodeGroupHttps:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow incoming HTTPS traffic (TCP/443) from worker nodes (for API server)
      GroupId: !Ref ControlPlaneSecurityGroup
      SourceSecurityGroupId: !Ref NodeGroupSecurityGroup
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443

  ControlPlaneEgressToNodeGroupKubelet:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow outgoing kubelet traffic (TCP/10250) to worker nodes
      GroupId: !Ref ControlPlaneSecurityGroup
      DestinationSecurityGroupId: !Ref NodeGroupSecurityGroup
      IpProtocol: tcp
      FromPort: 10250
      ToPort: 10250

  ControlPlaneEgressToNodeGroupHttps:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow outgoing HTTPS traffic (TCP/442) to worker nodes (for pods running extension API servers)
      GroupId: !Ref ControlPlaneSecurityGroup
      DestinationSecurityGroupId: !Ref NodeGroupSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  #============================================================================#
  # Worker nodes security group
  # Note: default egress rule (allow all traffic to all destinations) applies
  #============================================================================#

  NodeGroupSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for all the worker nodes
      VpcId: !Ref VPCID
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-NodeGroupSecurityGroup"
        - Key: !Sub "kubernetes.io/cluster/${ControlPlane}"
          Value: "owned"

  NodeGroupIngressFromNodeGroup:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow all incoming traffic from other worker nodes
      GroupId: !Ref NodeGroupSecurityGroup
      SourceSecurityGroupId: !Ref NodeGroupSecurityGroup
      IpProtocol: "-1"

  NodeGroupIngressFromControlPlaneKubelet:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow incoming kubelet traffic (TCP/10250) from control plane 
      GroupId: !Ref NodeGroupSecurityGroup
      SourceSecurityGroupId: !Ref ControlPlaneSecurityGroup
      IpProtocol: tcp
      FromPort: 10250
      ToPort: 10250

  NodeGroupIngressFromControlPlaneHttps:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow incoming HTTPS traffic (TCP/443) from control plane (for pods running extension API servers)
      GroupId: !Ref NodeGroupSecurityGroup
      SourceSecurityGroupId: !Ref ControlPlaneSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
  
  NodeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref NodeInstanceRole

  NodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonElasticFileSystemReadOnlyAccess
      Policies:
        - PolicyName: route53Access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: "route53:ChangeResourceRecordSets"
                Resource: "arn:aws:route53:::hostedzone/*"
              - Effect: Allow
                Action: 
                  - "route53:ListHostedZones"
                  - "route53:ListResourceRecordSets"
                Resource: "*"
        - PolicyName: AWSRegisterUsage
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - aws-marketplace:RegisterUsage
                Resource: "*"

  #============================================================================#
  # Node Group Stack
  #============================================================================#

  NodeGroupStack:
    Type: "AWS::CloudFormation::Stack"
    Metadata:
      cfn-lint: { config: { ignore_checks: [ W9901 ] } }
      DependsOn:
        - !Ref ControlPlane
    Properties:
      TemplateURL: https://s3.amazonaws.com/solodev-kubernetes/cloudformation/nodegroup.yaml
      Parameters:
        VPCID: !Ref VPCID
        KeyPairName: !Ref KeyPairName
        NodeGroupOS: !Ref NodeGroupOS
        Subnet1ID: !Ref PrivateSubnet1ID
        Subnet2ID: !If [2AZDeployment, !Ref PrivateSubnet2ID, !Ref "AWS::NoValue" ]
        Subnet3ID: !If [3AZDeployment, !Ref PrivateSubnet3ID, !Ref "AWS::NoValue" ]
        NodeInstanceType: !Ref NodeInstanceType
        NumberOfNodes: !Ref NumberOfNodes
        MaxNumberOfNodes: !Ref MaxNumberOfNodes
        NodeGroupName: !Ref NodeGroupName
        NodeVolumeSize: !Ref NodeVolumeSize
        CustomAmiId: !Ref CustomAmiId
        EKSClusterName: !Ref AWS::StackName
        NodeInstanceFamily: !Ref NodeInstanceFamily
        NodeGroupType: !Ref NodeGroupType
        NodeSecurityGroupId: !Ref NodeGroupSecurityGroup
        NodeRoleArn: !GetAtt NodeInstanceRole.Arn
        NodeInstanceProfileArn: !GetAtt NodeInstanceProfile.Arn
        NodeInstanceRoleName: !Ref NodeInstanceRole
        ClusterEndpoint: !GetAtt ControlPlane.Endpoint
        ClusterCaData: !GetAtt ControlPlane.CertificateAuthorityData
        BootstrapArguments: !If [EnableWeave, "--enable-weave 'true'", ""]

  #============================================================================#
  # Functions
  #============================================================================#

  LambdaZipsBucket:
    Type: AWS::S3::Bucket
  CopyZips:
    Type: Custom::CopyZips
    Properties:
      ServiceToken: !GetAtt 'CopyZipsFunction.Arn'
      SourceBucket: !Ref LambdaBucketName
      DestBucket: !Ref LambdaZipsBucket
      Prefix: !Ref 'KeyPrefix'
      Objects:
      - functions/packages/WebStack/lambda.zip
      - functions/packages/HelmReleaseResource/awsqs-kubernetes-helm.zip
      - functions/packages/awscliLayer/lambda.zip
      - functions/packages/kubectlLayer/lambda.zip
      - functions/packages/crhelperLayer/lambda.zip
  ArtifactCopyPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref LambdaZipsBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: Allow CloudFormation to copy artifacts from the bucket
            Effect: Allow
            Principal:
              Service: "cloudformation.amazonaws.com"
            Action:
              - s3:ListBucket
              - s3:GetObject
            Resource:
              - !Sub "arn:${AWS::Partition}:s3:::${LambdaZipsBucket}"
              - !Sub "arn:${AWS::Partition}:s3:::${LambdaZipsBucket}/${KeyPrefix}functions/packages/EksClusterResource/awsqs-eks-cluster.zip"
              - !Sub "arn:${AWS::Partition}:s3:::${LambdaZipsBucket}/${KeyPrefix}functions/packages/HelmReleaseResource/awsqs-kubernetes-helm.zip"
  CopyZipsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: lambda-copier
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: s3:GetObject
                Resource: !Sub
                  - 'arn:${AWS::Partition}:s3:::${BucketName}/${KeyPrefix}*'
                  - BucketName: !Ref LambdaBucketName
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:DeleteObject
                Resource: !Sub 'arn:${AWS::Partition}:s3:::${LambdaZipsBucket}/${KeyPrefix}*'
  RegisterTypeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: S3Policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                Resource: !Sub 'arn:${AWS::Partition}:s3:::${LambdaZipsBucket}/functions/packages/*'
        - PolicyName: ResourceTypePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "cloudformation:*"
                  - "iam:PassRole"
                  - "iam:CreateRole"
                  - "iam:CreatePolicy"
                  - "iam:ListPolicyVersions"
                  - "iam:DeletePolicyVersion"
                  - "iam:CreatePolicyVersion"
                  - "iam:AttachRolePolicy"
                  - "ssm:GetParameter"
                  - "ssm:PutParameter"
                  - "sts:GetCallerIdentity"
                  - "s3:GetObject"
                Resource: "*"  
  RegisterTypeFunction:
    DependsOn: CopyZips
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: lambda_function.lambda_handler
      MemorySize: 128
      Role: !GetAtt RegisterTypeRole.Arn
      Layers: [!Ref CrhelperLayer]
      Runtime: python3.7
      Timeout: 900
      Code:
        S3Bucket: !Ref LambdaZipsBucket
        S3Key: !Sub '${KeyPrefix}functions/packages/registerType/lambda.zip'  
  KubectlLayer:
    DependsOn: CopyZips
    Type: AWS::Lambda::LayerVersion
    Properties:
      Content:
        S3Bucket: !Ref LambdaZipsBucket
        S3Key: !Sub '${KeyPrefix}functions/packages/kubectlLayer/lambda.zip'
  AwsCliLayer:
    DependsOn: CopyZips
    Type: AWS::Lambda::LayerVersion
    Properties:
      Content:
        S3Bucket: !Ref LambdaZipsBucket
        S3Key: !Sub '${KeyPrefix}functions/packages/awscliLayer/lambda.zip'
  CrhelperLayer:
    DependsOn: CopyZips
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.6
        - python3.7
      Content:
        S3Bucket: !Ref LambdaZipsBucket
        S3Key: !Sub '${KeyPrefix}functions/packages/crhelperLayer/lambda.zip'
  RegisterHelmType:
    DependsOn: ArtifactCopyPolicy
    Type: Custom::RegisterType
    Properties:
      ServiceToken: !GetAtt RegisterTypeFunction.Arn
      TypeName: "AWSQS::Kubernetes::Helm"
      Version: "2.0.0-beta1"
      SchemaHandlerPackage: !Sub "s3://${LambdaZipsBucket}/${KeyPrefix}functions/packages/HelmReleaseResource/awsqs-kubernetes-helm.zip"
      IamPolicy:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - "secretsmanager:GetSecretValue"
          - "kms:Decrypt"
          - "eks:DescribeCluster"
          - "s3:GetObject"
          - "sts:AssumeRole"
          - "iam:PassRole"
          - "iam:ListRolePolicies"
          - "iam:ListAttachedRolePolicies"
          - "iam:GetRole"
          - "iam:GetPolicy"
          - "iam:GetPolicyVersion"
          - "ec2:CreateNetworkInterface"
          - "ec2:DeleteNetworkInterface"
          - "ec2:Describe*"
          - "logs:CreateLogGroup"
          - "logs:CreateLogStream"
          - "logs:PutLogEvents"
          - "lambda:*"
          Resource: "*"
  EKSLambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for lambda to communicate with cluster API
      VpcId: !Ref VPCID
  ClusterControlPlaneSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow lambda to communicate with the cluster API Server
      GroupId: !Ref ControlPlaneSecurityGroup
      SourceSecurityGroupId: !Ref EKSLambdaSecurityGroup
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443
  WebStackLambda:
    DependsOn: [ CopyZips ]
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_function.lambda_handler
      MemorySize: 256
      Role: !GetAtt KubernetesAdminRole.Arn
      Runtime: python3.7
      Timeout: 900
      Layers: [!Ref KubectlLayer, !Ref CrhelperLayer, !Ref AwsCliLayer]
      Code:
        S3Bucket: !Ref LambdaZipsBucket
        S3Key: !Sub '${KeyPrefix}functions/packages/WebStack/lambda.zip'
      Environment: { Variables: { KUBECONFIG: /tmp/.kube/config } }
      VpcConfig:
        SecurityGroupIds: [!Ref EKSLambdaSecurityGroup]
        SubnetIds: !If
          - 3AZDeployment
          - !Join [",", [ !Ref PrivateSubnet1ID, !Ref PrivateSubnet2ID, !Ref PrivateSubnet3ID ]]
          - !If
            - 2AZDeployment
            - !Join [",", [ !Ref PrivateSubnet1ID, !Ref PrivateSubnet2ID ]]
            - !Ref PrivateSubnet1ID
  CopyZipsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Copies objects from a source S3 bucket to a destination
      Handler: index.handler
      Runtime: python3.7
      Role: !GetAtt CopyZipsRole.Arn
      Timeout: 900
      Code:
        ZipFile: |
          import cfnresponse
          import json
          import logging
          import boto3
          logger = logging.getLogger(__name__)
          def copy_objects(source_bucket, dest_bucket, prefix, objects):
              s3 = boto3.client('s3')
              for o in objects:
                  key = prefix + o
                  copy_source = {'Bucket': source_bucket, 'Key': key}
                  logging.info(f'copy_source: {copy_source}\ndest_bucket: {dest_bucket}\nkey: {key}')
                  s3.copy_object(CopySource=copy_source, Bucket=dest_bucket, Key=key)
          def delete_objects(bucket, prefix, objects):
              s3 = boto3.client('s3')
              objects = {'Objects': [{'Key': prefix + o} for o in objects]}
              try:
                  s3.delete_objects(Bucket=bucket, Delete=objects)
              except s3.exceptions.NoSuchBucket:
                  pass
          def handler(event, context):
              print('Received event: %s' % json.dumps(event))
              status = cfnresponse.SUCCESS
              try:
                  if event['RequestType'] == 'Delete':
                      delete_objects(event['ResourceProperties']['DestBucket'], event['ResourceProperties']['Prefix'],
                                     event['ResourceProperties']['Objects'])
                  else:
                      copy_objects(event['ResourceProperties']['SourceBucket'], event['ResourceProperties']['DestBucket'],
                                   event['ResourceProperties']['Prefix'], event['ResourceProperties']['Objects'])
              except Exception:
                  logging.error('Unhandled exception', exc_info=True)
                  status = cfnresponse.FAILED
              finally:
                  cfnresponse.send(event, context, status, {}, None)
  
  #============================================================================#
  # Web Stack
  #============================================================================#

  NginxIngressStack:
    DependsOn: WebStackLambda
    Condition: EnableNginxIngress
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.amazonaws.com/solodev-kubernetes/cloudformation/solodev-eks-nginx-ingress.template.yaml
      Parameters:
        ClusterName: !Ref AWS::StackName
  ExternalDNSStack:
    DependsOn: WebStackLambda
    Condition: EnableExternalDNS
    Type: AWS::CloudFormation::Stack
    Properties: 
      TemplateURL: https://s3.amazonaws.com/solodev-kubernetes/cloudformation/solodev-eks-external-dns.template.yaml
      Parameters:
        ClusterName: !Ref AWS::StackName
  ExternalDNSWaitHandle: 
    Condition: EnableExternalDNS
    DependsOn: ExternalDNSStack
    Type: "AWS::CloudFormation::WaitConditionHandle"
  LetsEncryptStack:
    DependsOn: WebStackLambda
    Condition: EnableNginxIngress
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.amazonaws.com/solodev-kubernetes/cloudformation/solodev-eks-lets-encrypt.template.yaml
      Parameters:
        ClusterName: !Ref AWS::StackName
        AdminEmail: !Ref AdminEmail

#============================================================================#
# Outputs
#============================================================================#

Outputs:
  EKSClusterName:
    Value: !Ref AWS::StackName
  NodeGroupSecurityGroup:
    Value: !Ref NodeGroupSecurityGroup
  ControlPlaneSecurityGroup:
    Value: !Ref ControlPlaneSecurityGroup
  OIDCIssuerURL:
    Value: !Select [1, !Split ["//", !GetAtt ControlPlane.OpenIdConnectIssuerUrl]]
  WebStackArn:
    Value: !GetAtt WebStackLambda.Arn