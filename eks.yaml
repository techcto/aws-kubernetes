AWSTemplateFormatVersion: "2010-09-09"
Description: Deploys a Solodev Optimized EKS cluster into an existing VPC
Metadata:
  QSLint:
    Exclusions: [W3002, W3001, W1010]
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network configuration
        Parameters:
          - VPCID
          - PrivateSubnet1ID
          - PrivateSubnet2ID
          - PrivateSubnet3ID
          - PublicSubnet1ID
          - PublicSubnet2ID
          - PublicSubnet3ID
      - Label:
          default: Amazon EC2 configuration
        Parameters:
          - KeyPairName
      - Label:
          default: Amazon EKS configuration
        Parameters:
          - NodeInstanceType
          - NumberOfNodes
          - NodeGroupName
          - NodeVolumeSize
          - ManagedNodeGroup
          - KubernetesVersion
    ParameterLabels:
      KeyPairName:
        default: SSH key name
      NodeInstanceType:
        default: Nodes instance type
      NumberOfNodes:
        default: Number of nodes
      NodeGroupName:
        default: Node group name
      NodeVolumeSize:
        default: Node volume size
      ManagedNodeGroup:
        default: Managed Node Group
      PublicSubnet1ID:
        default: Public subnet 1 ID
      PublicSubnet2ID:
        default: Public subnet 2 ID
      PublicSubnet3ID:
        default: Public subnet 3 ID
      PrivateSubnet1ID:
        default: Private subnet 1 ID
      PrivateSubnet2ID:
        default: Private subnet 2 ID
      PrivateSubnet3ID:
        default: Private subnet 3 ID
      VPCID:
        default: VPC ID
Parameters:
  KeyPairName:
    Description: Name of an existing key pair, which allows you
      to securely connect to your instance after it launches.
    Type: String
    Default: ""
  NodeInstanceType:
    Default: t3.medium
    AllowedValues:
      - t3.nano
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.12xlarge
      - m5.24xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c5.18xlarge
      - i3.large
      - i3.xlarge
      - i3.2xlarge
      - i3.4xlarge
      - i3.8xlarge
      - i3.16xlarge
      - x1.16xlarge
      - x1.32xlarge
      - p3.2xlarge
      - p3.8xlarge
      - p3.16xlarge
      - r5.large
      - r5.xlarge
      - r5.2xlarge
      - r5.4xlarge
      - r5.12xlarge
      - r5.24xlarge
      - r5d.large
      - r5d.xlarge
      - r5d.2xlarge
      - r5d.4xlarge
      - r5d.12xlarge
      - r5d.24xlarge
      - z1d.large
      - z1d.xlarge
      - z1d.2xlarge
      - z1d.3xlarge
      - z1d.6xlarge
      - z1d.12xlarge
    ConstraintDescription: Must be a valid EC2 instance type
    Description: The type of EC2 instance for the node instances.
    Type: String
  NumberOfNodes:
    Default: 3
    Description: The number of Amazon EKS node instances. The default is one for each of the three Availability Zones.
    Type: Number
  MaxNumberOfNodes:
    Default: 3
    Description: Maximum number of Amazon EKS node instances. The default is three.
    Type: Number
  NodeGroupName:
    Default: Default
    Description: The name for EKS node group.
    Type: String
  NodeInstanceFamily:
    AllowedValues: ['Standard', 'ARM', 'GPU']
    Type: String
    Description: Choose the instance family to match the value of "Node instance type."
    Default: Standard
  NodeGroupType:
    Type: String
    AllowedValues: [ Managed, Unmanaged ]
    Default: Managed
    Description: Choose "Unmanaged" to create an Auto Scaling group without using the EKS-managed node groups feature.
  NodeGroupOS:
    AllowedValues:
      - 'Amazon Linux 2'
      - 'Bottlerocket'
      - 'Windows'
    Default: 'Amazon Linux 2'
    Description: Operating system to use for node instances. Note that if you choose "Windows," an additional
      Amazon Linux node group is created.
    Type: String
  NodeVolumeSize:
    Default: 20
    Description: "The size for the node's root EBS volumes."
    Type: String
  ManagedNodeGroup:
    Type: String
    Default: 'Yes'
    AllowedValues: ['Yes', 'No']
    Description: If 'No' the stack will create just the Security Group skipping the node group. This is useful if you manage the node group with third party integration, such as Spot.io
  CustomNodeRole:
    Type: String
    Default: ""
  VPCID:
    Type: "AWS::EC2::VPC::Id"
    Description: The ID of your existing VPC (e.g., vpc-0343606e)
  PublicSubnet1ID:
    Type: String
    Description: The ID of the public subnet in Availability Zone 1 in your existing VPC (e.g., subnet-a0246dcd)
    Default: ""
  PublicSubnet2ID:
    Type: String
    Description: The ID of the public subnet in Availability Zone 2 in your existing VPC (e.g., subnet-b1236eea)
    Default: ""
  PublicSubnet3ID:
    Type: String
    Description: The ID of the public subnet in Availability Zone 3 in your existing VPC (e.g., subnet-c3456aba)
    Default: ""
  PrivateSubnet1ID:
    Type: "AWS::EC2::Subnet::Id"
    Description: The ID of the private subnet in Availability Zone 1 in your existing VPC (e.g., subnet-fe9a8b32)
  PrivateSubnet2ID:
    Type: String
    Description: The ID of the private subnet in Availability Zone 2 in your existing VPC (e.g., subnet-be8b01ea)
    Default: ""
  PrivateSubnet3ID:
    Type: String
    Description: The ID of the private subnet in Availability Zone 3 in your existing VPC (e.g., subnet-abd39039)
    Default: ""
  KubernetesVersion:
    Type: String
    Default: "1.21"
  BastionRole:
    Type: String
    Default: ""
  EKSPublicAccessCIDRs:
    Type: List<String>
    Default: 0.0.0.0/0
  EKSPublicAccessEndpoint:
    Type: String
    AllowedValues: [Enabled, Disabled]
    Default: Disabled
  EKSPrivateAccessEndpoint:
    Type: String
    AllowedValues: [Enabled, Disabled]
    Default: Enabled
  EKSClusterLoggingTypes:
    Type: List<String>
    Default: ""
  EKSEncryptSecrets:
    Type: String
    AllowedValues: [Enabled, Disabled]
    Default: Enabled
  EKSEncryptSecretsKmsKeyArn:
    Type: String
    Default: ""
  AdditionalEKSAdminUserArn:
    Type: String
    Default: ""
  AdditionalEKSAdminRoleArn:
    Type: String
    Default: ""
  IamOidcProvider:
    Type: String
    AllowedValues: [ "Enabled", "Disabled" ]
    Default: "Enabled"
  ProvisionWeave:
    Type: String
    AllowedValues: [ "Enabled", "Disabled" ]
    Default: "Enabled"
    Description: "Choose Enabled to enable Weave CNI"
  CustomAmiId:
    Type: String
    Default: "ami-0d6c8b2a8562eba37"
    Description: "(Optional) If an AMI ID is specified: https://docs.aws.amazon.com/eks/latest/userguide/retrieve-ami-id.html"
  AdminEmail:
    Type: String
    Default: ""
    Description: "What is your email address?"

Mappings:
  Config:
    Prefix: { Value: 'eks-quickstart' }

Conditions:
  BastionRole: !Not [ !Equals [ !Ref BastionRole, "" ] ]
  UseKeyPair: !Not [ !Equals [ !Ref KeyPairName, "" ] ]
  EnablePublicSubnets: !Not [!Equals [!Ref PublicSubnet1ID, ""]]
  EnablePrivateEndpoint: !Equals [ !Ref EKSPrivateAccessEndpoint, "Enabled" ]
  EnablePublicEndpoint: !Equals [ !Ref EKSPublicAccessEndpoint, "Enabled" ]
  CustomeNodeRoleProvided: !Not [ !Equals [ !Ref CustomNodeRole, "" ] ]
  CreateKey: !And
    - !Equals [ !Ref EKSEncryptSecretsKmsKeyArn, "" ]
    - !Equals [ !Ref EKSEncryptSecrets, Enabled ]
  EnableEncryption: !Equals [ !Ref EKSEncryptSecrets, Enabled ]
  LoggingEnabled: !Not [ !Equals [ !Select [ 0, !Ref EKSClusterLoggingTypes ], "" ] ]
  EnableIamOidcProvider: !Equals [!Ref 'IamOidcProvider', 'Enabled']
  3AZDeployment: !Not [!Equals [!Ref PrivateSubnet3ID, ""]]
  2AZDeployment: !Or
    - !Not [!Equals [!Ref PrivateSubnet2ID, ""]]
    - !Not [!Equals [!Ref PrivateSubnet3ID, ""]]
  CustomAmi: !Equals [!Ref CustomAmiId, 'Enabled']
  EnableWeave: !Equals [!Ref 'ProvisionWeave', 'Enabled']
  AddUser: !Not [ !Equals [ !Ref AdditionalEKSAdminUserArn, "" ] ]
  AddRole: !Not [ !Equals [ !Ref AdditionalEKSAdminRoleArn, "" ] ]

Resources:

  #============================================================================#
  # Shared Resources
  #============================================================================#

  SharedResources:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.amazonaws.com/solodev-kubernetes/cloudformation/shared.yaml

  #============================================================================#
  # Controlplane Security
  #============================================================================#

  CleanupLambdas:
    Type: Custom::LambdaCleanup
    DependsOn: CleanupControlPlaneSecurityGroupDependencies
    Properties:
      ServiceToken: !Sub ['arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${Prefix}-CleanupLambdas', {Prefix: !FindInMap [Config, Prefix, Value]}]
      SecurityGroupId: !GetAtt ControlPlaneSecurityGroup.GroupId
  CleanupControlPlaneSecurityGroupDependencies:
    Type: Custom::LambdaSGCleanup
    DependsOn: SharedResources
    Properties:
      ServiceToken: !Sub ['arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${Prefix}-CleanupSecurityGroupDependencies', {Prefix: !FindInMap [Config, Prefix, Value]}]
      Region: !Ref "AWS::Region"
      SecurityGroups:
        - !GetAtt ControlPlaneSecurityGroup.GroupId
  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Cluster communication
      VpcId: !Ref VPCID
  ControlPlaneSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow SG members to access k8s api
      GroupId: !Ref ControlPlaneSecurityGroup
      SourceSecurityGroupId: !Ref ControlPlaneSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
  KubernetesAdminRole:
    Type: "AWS::IAM::Role"
    Metadata:
      cfn-lint:
        config:
          ignore_checks: [EIAMPolicyWildcardResource]
          ignore_reasons:
            EIAMPolicyWildcardResource: resources are created after stack is created by k8s/helm/eks resource types, and as such are unkown at role cretion time
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: eksStackPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "eks:DescribeFargateProfile"
                  - "eks:ListTagsForResource"
                  - "eks:ListUpdates"
                  - "eks:DisassociateIdentityProviderConfig"
                  - "eks:DescribeCluster"
                  - "eks:CreateAddon"
                  - "eks:DeleteAddon"
                  - "eks:UntagResource"
                  - "eks:ListClusters"
                  - "eks:UpdateClusterVersion"
                  - "eks:AssociateEncryptionConfig"
                  - "eks:UpdateNodegroupConfig"
                  - "eks:DeleteCluster"
                  - "eks:DeleteFargateProfile"
                  - "eks:UpdateClusterConfig"
                  - "eks:DescribeAddonVersions"
                  - "eks:DescribeUpdate"
                  - "eks:CreateCluster"
                  - "eks:DescribeIdentityProviderConfig"
                  - "eks:ListAddons"
                  - "eks:DescribeAddon"
                  - "eks:UpdateNodegroupVersion"
                  - "eks:AccessKubernetesApi"
                  - "eks:AssociateIdentityProviderConfig"
                  - "eks:DeleteNodegroup"
                  - "eks:CreateFargateProfile"
                  - "eks:UpdateAddon"
                  - "eks:TagResource"
                  - "eks:ListNodegroups"
                  - "eks:ListIdentityProviderConfigs"
                  - "eks:CreateNodegroup"
                  - "eks:ListFargateProfiles"
                  - "eks:DescribeNodegroup"
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeSubnets
                  - ec2:DescribeVpcs
                  - lambda:InvokeFunction
                  - s3:GetObject
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - lambda:AddPermission
                  - lambda:RemovePermission
                Resource:  "*"
              - Effect: Allow
                Action:
                  - events:PutRule
                  - events:DeleteRule
                  - events:PutTargets
                  - events:RemoveTargets
                Resource:  "*"

  #============================================================================#
  # Controlplane
  #============================================================================#
  
  KMSKey:
    Condition: CreateKey
    Type: "AWS::KMS::Key"
    Metadata:
      cfn-lint:
        config:
          ignore_checks: [EIAMPolicyActionWildcard, EKMSKeyEnableKeyRotation]
          ignore_reasons:
            EKMSKeyEnableKeyRotation: 'Need to experiment further with the effets of rotating keys and EKS secrets'
            EIAMPolicyWildcardResource: 'this is the default kms policy as per https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html#key-policy-default'
    Properties:
      KeyPolicy: {
        "Version": "2012-10-17",
        "Id": "key-default-1",
        "Statement": [
          {
            "Sid": "Enable IAM User Permissions",
            "Effect": "Allow",
            "Principal": {
              "AWS": !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
            },
            "Action": "kms:*",
            "Resource": "*"
          }
        ]
      }

  ControlPlane:
    Type: "AWSQS::EKS::Cluster"
    DependsOn: CleanupLoadBalancers
    Properties:
      Name: !Ref AWS::StackName
      ResourcesVpcConfig:
        SecurityGroupIds: [ !Ref ControlPlaneSecurityGroup ]
        SubnetIds: !If
          - EnablePublicSubnets
          - !If
            - 3AZDeployment
            - [ !Ref PrivateSubnet1ID, !Ref PrivateSubnet2ID, !Ref PrivateSubnet3ID, !Ref PublicSubnet1ID, !Ref PublicSubnet2ID, !Ref PublicSubnet3ID ]
            - !If
              - 2AZDeployment
              - [ !Ref PrivateSubnet1ID, !Ref PrivateSubnet2ID, !Ref PublicSubnet1ID, !Ref PublicSubnet2ID ]
              - [ !Ref PrivateSubnet1ID, !Ref PublicSubnet1ID ]
          - !If
            - 3AZDeployment
            - [ !Ref PrivateSubnet1ID, !Ref PrivateSubnet2ID, !Ref PrivateSubnet3ID ]
            - !If
              - 2AZDeployment
              - [ !Ref PrivateSubnet1ID, !Ref PrivateSubnet2ID ]
              - [ !Ref PrivateSubnet1ID ]
        PublicAccessCidrs: !Ref EKSPublicAccessCIDRs
        EndpointPrivateAccess: !If [ EnablePrivateEndpoint, true, false ]
        EndpointPublicAccess: !If [ EnablePublicEndpoint, true, false ]
      EnabledClusterLoggingTypes: !If [ LoggingEnabled, !Ref EKSClusterLoggingTypes, !Ref "AWS::NoValue" ]
      EncryptionConfig: !If
        - EnableEncryption
        - - Resources: [ secrets ]
            Provider:
              KeyArn: !If [ CreateKey, !GetAtt KMSKey.Arn, !Ref EKSEncryptSecretsKmsKeyArn ]
        - !Ref AWS::NoValue
      RoleArn: !Sub ["arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${Prefix}-ControlPlane", {Prefix: !FindInMap [Config, Prefix, Value]}]
      Version: !Ref KubernetesVersion
      KubernetesApiAccess:
        Roles:
          - Arn: !Sub
              - 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${NodeRole}'
              - NodeRole: !If
                  - CustomeNodeRoleProvided
                  - !Ref CustomNodeRole
                  - !Sub [ '${Prefix}-UnmanagedNodeInstance', { Prefix: !FindInMap [ Config, Prefix, Value ] } ]
            Username: 'system:node:{{EC2PrivateDNSName}}'
            Groups: [ 'system:bootstrappers', 'system:nodes', 'eks:kube-proxy-windows' ]
          - Arn: !GetAtt KubernetesAdminRole.Arn
            Username: !GetAtt KubernetesAdminRole.Arn
            Groups: [ 'system:masters' ]
          - Arn: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/awsqs-kubernetes-helm"
            Username: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/awsqs-kubernetes-helm"
            Groups: [ 'system:masters' ]
          - Arn: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/awsqs-kubernetes-get"
            Username: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/awsqs-kubernetes-get"
            Groups: [ 'system:masters' ]
          - Arn: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/awsqs-kubernetes-resource"
            Username: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/awsqs-kubernetes-resource"
            Groups: [ 'system:masters' ]
          # We don't know whether GetCallerArn returned a user arn or a role arn, so we just add it to both
          - Arn: !GetAtt CallerArn.Arn
            Username: !GetAtt CallerArn.Arn
            Groups: [ 'system:masters' ]
          - !If
            - BastionRole
            - Arn: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${BastionRole}"
              Username: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${BastionRole}"
              Groups: [ 'system:masters' ]
            - !Ref 'AWS::NoValue'
          - !If
            - AddRole
            - Arn: !Ref AdditionalEKSAdminRoleArn
              Username: !Ref AdditionalEKSAdminRoleArn
              Groups: [ 'system:masters' ]
            - !Ref 'AWS::NoValue'
        Users:
          # We don't know whether GetCallerArn returned a user arn or a role arn, so we just add it to both
          - Arn: !GetAtt CallerArn.Arn
            Username: !GetAtt CallerArn.Arn
            Groups: [ 'system:masters' ]
          - Arn: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
            Username: !GetAtt CallerArn.Arn
            Groups: [ 'system:masters' ]
          - !If
            - AddUser
            - Arn: !Ref AdditionalEKSAdminUserArn
              Username: !Ref AdditionalEKSAdminUserArn
              Groups: [ 'system:masters' ]
            - !Ref 'AWS::NoValue'
  CleanupLoadBalancers:
    Type: Custom::CleanupLoadBalancers
    Properties:
      ServiceToken: !Sub ['arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${Prefix}-CleanupLoadBalancers', {Prefix: !FindInMap [Config, Prefix, Value]}]
      ClusterName: !Ref AWS::StackName
  CallerArn:
    Type: Custom::GetCallerArn
    Properties:
      ServiceToken: !Sub ['arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${Prefix}-GetCallerArn', {Prefix: !FindInMap [Config, Prefix, Value]}]
  ClusterOIDCProvider:
    Condition: EnableIamOidcProvider
    Type: AWS::IAM::OIDCProvider
    Properties:
      ClientIdList:
        - sts.amazonaws.com
      ThumbprintList:
        - 9e99a48a9960b14926bb7f3b02e22da2b0ab7280
      Url: !GetAtt ControlPlane.OIDCIssuerURL

  #============================================================================#
  # Node Group Stack
  #============================================================================#

  NodeGroupStack:
    Type: "AWS::CloudFormation::Stack"
    DependsOn: ControlPlane
    Properties:
      TemplateURL: https://s3.amazonaws.com/solodev-kubernetes/cloudformation/amazon-eks-nodegroup.template.yaml
      Parameters:
        KeyPairName: !If [UseKeyPair, !Ref KeyPairName, !Ref 'AWS::NoValue']
        NodeGroupOS: !Ref NodeGroupOS
        Subnet1ID: !Ref PrivateSubnet1ID
        Subnet2ID: !If [2AZDeployment, !Ref PrivateSubnet2ID, !Ref "AWS::NoValue" ]
        Subnet3ID: !If [3AZDeployment, !Ref PrivateSubnet3ID, !Ref "AWS::NoValue" ]
        NodeInstanceType: !Ref NodeInstanceType
        NumberOfNodes: !Ref NumberOfNodes
        MaxNumberOfNodes: !Ref MaxNumberOfNodes
        NodeGroupName: !Ref NodeGroupName
        NodeVolumeSize: !Ref NodeVolumeSize
        CustomAmiId: !If [CustomAmi, !Ref CustomAmiId, !Ref "AWS::NoValue" ]
        EKSClusterName: !Ref AWS::StackName
        NodeInstanceFamily: !Ref NodeInstanceFamily
        NodeGroupType: !Ref NodeGroupType
        CreateNodeGroup: !Ref ManagedNodeGroup
        Labels: !Sub "Name=Nodegroup-${AWS::StackName}"
        BootstrapArguments: !If [EnableWeave, "--enable-weave 'true'", ""]
  
  #============================================================================#
  # Web Stack
  #============================================================================#

  WebStack:
    Type: "AWS::CloudFormation::Stack"
    DependsOn: ControlPlane
    Properties:
      TemplateURL: https://s3.amazonaws.com/solodev-kubernetes/cloudformation/webstack.yaml
      Parameters:
        VPCID: !Ref VPCID
        ControlPlaneSecurityGroup: !Ref ControlPlaneSecurityGroup
        KubernetesAdminRoleArn: !GetAtt KubernetesAdminRole.Arn
        SubnetIds: !If
          - EnablePublicSubnets
          - !If
            - 3AZDeployment
            - !Join [",", [ !Ref PrivateSubnet1ID, !Ref PrivateSubnet2ID, !Ref PrivateSubnet3ID, !Ref PublicSubnet1ID, !Ref PublicSubnet2ID, !Ref PublicSubnet3ID ]]
            - !If
              - 2AZDeployment
              - !Join [",", [ !Ref PrivateSubnet1ID, !Ref PrivateSubnet2ID, !Ref PublicSubnet1ID, !Ref PublicSubnet2ID ]]
              - !Join [",", [ !Ref PrivateSubnet1ID, !Ref PublicSubnet1ID ]]
          - !If
            - 3AZDeployment
            - !Join [",", [ !Ref PrivateSubnet1ID, !Ref PrivateSubnet2ID, !Ref PrivateSubnet3ID ]]
            - !If
              - 2AZDeployment
              - !Join [",", [ !Ref PrivateSubnet1ID, !Ref PrivateSubnet2ID ]]
              - !Join [",", [ !Ref PrivateSubnet1ID ]]
        ClusterName: !Ref AWS::StackName
        AdminEmail: !Ref AdminEmail

#============================================================================#
# Outputs
#============================================================================#

Outputs:
  EksArn:
    Value: !GetAtt ControlPlane.Arn
  CAData:
    Value: !GetAtt ControlPlane.CertificateAuthorityData
  EKSEndpoint:
    Value: !GetAtt ControlPlane.Endpoint
  OIDCIssuerURL:
    Value: !GetAtt ControlPlane.OIDCIssuerURL
  EKSClusterName:
    Value: !Ref ControlPlane
  ControlPlaneSecurityGroup:
    Value: !Ref ControlPlaneSecurityGroup
  SysOpsAdminRoleArn:
    Value: !GetAtt KubernetesAdminRole.Arn
  NumberOfNodes:
    Value: !Ref NumberOfNodes
    Description: Number of Nodes